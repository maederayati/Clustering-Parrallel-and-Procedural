Pseudocode for Parallel K_means, using MPI and Open MP

Start MPI environment 

		Set  number of processors as mySize
		Set  the ID of processors as myRank
		Set number of threads as NUM_THREADS	
		Set Portion as arraysize/mySize
		Set the number of clusters, as cNum=2

		Initialize the test data
		Initialize centroids	

		difference=1
		while  difference>0
			initialize all the elements of array of sum and count as 0

		Start open mp environment
			initialize  i,j
			Set  the ID of threads as ID
			threadPortion=portion/NUM_THREADS
			for  i= myRank*portion+(id*threadPortion) to  myRank*portion+(id*threadPortion)+threadPortion-1
						min=1000000
						for  j=0 to  cNum-1
							dist= sqrt(pow((data[i][0]-c[j][0]),2)+pow((data[i][1]-c[j][1]),2))
							if min>dist 
								min=dist
								cluster=j
							output[i][0]=cluster
		Close open mp environment

		for i=0 to cNum-1
			for  j=myRank*portion+(id*threadPortion) to myRank*portion+(id*threadPortion)+threadPortion
				if  i = output[j][0]										
					sum[myRank][i][0][0]=sum[myRank][i][0][0]+data[j][0]										
					sum[myRank][i][1][0]=sum[myRank][i][1][0]+data[j][1]
					count[myRank][i][0]=count[myRank][i][0]+1

					for j=0 to cNum-1
						for i=0 to mySize-1
							Broadcast one item of sum[i][j][0] from processor i
							Broadcast one item of sum[i][j][1] from processor i
							Broadcast one item of count[i][j] from processor i
					difsum=0

					
					if myRank=0
						for i=0 to cNum-1
							for j=0 to mySize-1
								sumtempx[i]=sum[j][i][0]+sumtempx[i]
								sumtempy[i]=sum[j][i][1]+sumtempy[i]
								counttemp[i]=count[j][i]+counttemp[i]
								old=c[i][0];
								c[i][0]=sumtempx[i]/counttemp[i];
								new=c[i][0];
								dif[0][i]=abs(old-new);
								old=c[i][1]
							
							c[i][1]=sumtempy[i]/counttemp[i]
							new=c[i][1]
							dif[1][i]=abs(old-new)
							for k=0 to 1
							difsum=difsum+dif[k][i]
					
					for  i=0 to cNum-1
						Broadcast two items of c[i] from processor 			
					difference=difsum
					broadcast one items of difference from processor 0 	
Close MPI environment
